from base import Dto, DtoInteger, DtoObject, DtoBoolean, DtoTimestamp, DtoUom, DtoNumeric, DtoText
import uom


class DtoFieldWeather(Dto):
    def __init__(self, **kwargs):
        Dto.__init__(self)
        self.add_attr('account_device_id', DtoInteger(), read_only=True)
        self.add_attr('field_boundary_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('max_temperature', DtoUom(uom.Kelvin))
        self.add_attr('min_temperature', DtoUom(uom.Kelvin))
        self.add_attr('rainfall', DtoUom(uom.Meter))
        self.add_attr('evapotranspiration', DtoUom(uom.Meter))
        self.add_attr('condition', DtoText())
        self.add_attr('temperature', DtoUom(uom.Kelvin))
        self.add_attr('precipitation_probability', DtoUom(uom.NoUom))
        self.add_attr('wind_speed', DtoUom(uom.MeterPerSecond))
        self.add_attr('wind_gust', DtoUom(uom.MeterPerSecond))
        self.add_attr('wind_direction', DtoUom(uom.NoUom))
        self.add_attr('relative_humidity', DtoUom(uom.NoUom))
        self.add_attr('solar_radiation', DtoUom(uom.Watt / uom.Meter ** 2))
        self.add_attr('max_relative_humidity', DtoUom(uom.NoUom))
        self.add_attr('min_relative_humidity', DtoUom(uom.NoUom))
        self.add_attr('temperature_feels_like', DtoUom(uom.Kelvin))
        self.add_attr('code', DtoInteger())
        self.add_attr('precipitation_type', DtoText())
        self.add_attr('created', DtoTimestamp(), nullable=False, has_default=True)
        self.update(**kwargs)


class DtoFieldCrop(Dto):
    def __init__(self, **kwargs):
        Dto.__init__(self)
        self.add_attr('id', DtoInteger(), read_only=True)
        self.add_attr('field_boundary_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('account_device_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('geometry', DtoObject())
        self.add_attr('srid', DtoInteger(), value=4326, read_only=True)
        self.add_attr('crop_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('relative_maturity', DtoInteger(), nullable=True, has_default=False)
        self.add_attr('growing_degree_units', DtoInteger(), nullable=True, has_default=False)
        self.add_attr('growing_degree_units_base', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('growing_degree_units_upper', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('plant_date', DtoTimestamp(), nullable=False, has_default=False)
        self.add_attr('maturity_date', DtoTimestamp(), nullable=False, has_default=False)
        self.add_attr('baseline_depletion_date', DtoTimestamp(), nullable=True, has_default=False)
        self.add_attr('baseline_depletion', DtoNumeric(), nullable=True, has_default=False)
        self.add_attr('fao_growth_stage', DtoInteger(), nullable=False, has_default=True)
        self.add_attr('growth_stage_id', DtoInteger(), nullable=True)
        self.add_attr('crop_coeffiecent', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('root_depth', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('root_depth_min', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('root_depth_max', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('critical_depletion', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('yield_response_factor', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('accumulated_growing_degree_units', DtoNumeric(), nullable=True)
        self.add_attr('potential_yield_loss', DtoUom(uom.NoUom), nullable=True)
        self.add_attr('forecasted_yield_loss', DtoUom(uom.NoUom), nullable=True)
        self.add_attr('growing_days', DtoInteger(), nullable=True)
        self.add_attr('growth_ratio', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('enabled', DtoBoolean(), value=True)
        self.update(**kwargs)


class DtoFieldSoil(Dto):
    def __init__(self, **kwargs):
        Dto.__init__(self)
        self.add_attr('id', DtoInteger(), read_only=True)
        self.add_attr('field_boundary_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('account_device_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('geometry', DtoObject(), nullable=False)
        self.add_attr('name', DtoText(), nullable=False)
        self.add_attr('available_water_holding_capacity', DtoInteger(), nullable=False)
        self.add_attr('hydrological_group', DtoText(), nullable=False)
        self.add_attr('srid', DtoInteger(), value=4326, read_only=True)
        self.add_attr('row_type', DtoText(), value='row', read_only=True)
        self.add_attr('runoff_curve_number', DtoNumeric(), read_only=True)
        self.update(**kwargs)


class DtoFieldIrrigator(Dto):
    def __init__(self, **kwargs):
        Dto.__init__(self)
        self.add_attr('id', DtoInteger(), read_only=True)
        self.add_attr('field_boundary_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('account_device_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('geometry', DtoObject())
        self.add_attr('irrigated', DtoBoolean(), nullable=False, has_default=True)
        self.add_attr('ignore', DtoBoolean(), nullable=False, has_default=True)
        self.add_attr('avoid', DtoBoolean(), nullable=False, has_default=True)
        self.add_attr('srid', DtoInteger(), value=4326, read_only=True)
        self.add_attr('start_degree', DtoInteger(), read_only=True)
        self.add_attr('end_degree', DtoInteger(), read_only=True)
        self.add_attr('vri_application_point_id', DtoInteger(), read_only=True)
        self.update(**kwargs)


class DtoFieldManagementZone(Dto):
    def __init__(self, **kwargs):
        Dto.__init__(self)
        self.add_attr('id', DtoInteger(), read_only=True)
        self.add_attr('field_boundary_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('account_device_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('geometry', DtoObject())
        self.add_attr('field_crop_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('field_soil_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('field_irrigator_id', DtoInteger(), nullable=True, has_default=False)
        self.add_attr('total_available_water', DtoUom(uom.Meter), nullable=False, has_default=True)
        self.add_attr('readily_available_water', DtoUom(uom.Meter), nullable=False, has_default=True)
        self.add_attr('refill_line', DtoUom(uom.Meter), nullable=False, has_default=True)
        self.add_attr('safety_line', DtoUom(uom.Meter), nullable=False, has_default=True)
        self.add_attr('crop_et', DtoUom(uom.Meter), nullable=False, has_default=True)
        self.add_attr('accumulated_crop_et', DtoUom(uom.Meter), nullable=False, has_default=True)
        self.add_attr('srid', DtoInteger(), value=4326, read_only=True)
        self.add_attr('effective_rain', DtoUom(uom.Meter), value=0, read_only=True)
        self.add_attr('max_depletion', DtoUom(uom.Meter))
        self.add_attr('max_yield_loss', DtoUom(uom.NoUom))
        self.add_attr('available_water_percent', DtoUom(uom.NoUom), read_only=True)
        self.add_attr('irrigation_refill', DtoUom(uom.Meter), read_only=True)
        self.add_attr('depletion_projected', DtoUom(uom.Meter), read_only=True)
        self.add_attr('depletion_projected_irrigation', DtoUom(uom.Meter), read_only=True)
        self.add_attr('irrigated', DtoBoolean())
        self.add_attr('next_irrigation_depth', DtoUom(uom.Meter))
        self.add_attr('next_irrigation_due', DtoTimestamp())
        self.add_attr('next_irrigation_start', DtoTimestamp())
        self.add_attr('next_irrigation_refill_time', DtoUom(uom.Second))
        self.add_attr('days_to_stress', DtoUom(uom.Second))
        self.add_attr('enabled', DtoBoolean, value=True, read_only=True)
        self.update(**kwargs)


class DtoFieldManagementZoneNoUom(Dto):
    def __init__(self, **kwargs):
        Dto.__init__(self)
        self.add_attr('id', DtoInteger(), read_only=True)
        self.add_attr('account_device_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('geometry', DtoObject())
        self.add_attr('field_crop_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('field_soil_id', DtoInteger(), nullable=False, has_default=False)
        self.add_attr('field_irrigator_id', DtoInteger(), nullable=True, has_default=False)
        self.add_attr('total_available_water', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('readily_available_water', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('refill_line', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('safety_line', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('crop_et', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('accumulated_crop_et', DtoNumeric(), nullable=False, has_default=True)
        self.add_attr('srid', DtoInteger(), value=4326, read_only=True)
        self.add_attr('effective_rain', DtoNumeric(), value=0, read_only=True)
        self.add_attr('max_depletion', DtoNumeric())
        self.add_attr('max_yield_loss', DtoNumeric())
        self.add_attr('available_water_percent', DtoNumeric(), read_only=True)
        self.add_attr('irrigation_refill', DtoNumeric(), read_only=True)
        self.add_attr('depletion_projected', DtoNumeric(), read_only=True)
        self.add_attr('depletion_projected_irrigation', DtoNumeric(), read_only=True)
        self.add_attr('irrigated', DtoBoolean())
        self.add_attr('next_irrigation_depth', DtoNumeric())
        self.add_attr('next_irrigation_due', DtoTimestamp())
        self.add_attr('next_irrigation_start', DtoTimestamp())
        self.add_attr('next_irrigation_refill_time', DtoNumeric())
        self.add_attr('days_to_stress', DtoNumeric())
        self.add_attr('enabled', DtoBoolean, value=True, read_only=True)
        self.update(**kwargs)